<xml>
  <terra>
    <effect name="solid" source="EffectTextured.effect"/>
    <segments>2</segments>
    <size2>10,10</size2>	
	<rc>100,100</rc>
	<constant>0</constant>
	<heightmap source="media/test256.png" color="0.0, 0.5, 2.0, 0.0"/>
  </terra>
  
  <!--
	// Add textures we will need for our effects, and terrain generation/modification.
	GetManager< Texture >()->Add( "test256", new Texture( "media/test256.png", true, true ) );

	// Load an effect, then modify it to fit our needs.
	Effect::ptr landEffect = GetManager< Effect >()->Add( "solid", "media/EffectTextured.xml" );
	landEffect->SetBlend( Blend( Usage::False ) );
	landEffect->SetTexture( 0, GetManager< Texture >()->Find( "test256" ) );

	Effect::ptr cutoutEffect = GetManager< Effect >()->Add( "cutout", "media/EffectTextured.xml" );
	cutoutEffect->SetBlend( Blend( Usage::True, Blend::Effect::One, Blend::Effect::One ) );
	cutoutEffect->SetTexture( 0, GetManager< Texture >()->Find( "test256" ) );

	// At this point the same effect has been loaded twice, modified to have different blending modes for the land and cutout effect.
	// Note that the same texture is shared, and internally all other possible assets are shared, such as shaders.

	Terra::Parameters parameters;
	Terra * terra;

    parameters.Reset();
	parameters.SetSize( unify::Size< float >( 10, 10 ) );
    parameters.SetEffect( GetManager< Effect >()->Find( "solid" ) ); // Note the use of FindEffect to simplify interaction with the Effect Manager.
    parameters.SetRowsColumns( unify::RowColumn< unsigned int >( 256, 256 ) );
    parameters.SetConstant( 0.0f );
    parameters.SetTexArea( unify::TexArea::Full() );
	parameters.SetHeightMap( Terra::TextureOpMap( GetManager< Texture >()->Find( "test256" ), unify::ColorUnit::ColorUnitARGB( 0.0f, 0.5f, 2.0f, 0.0f ) ) );
	terra = new Terra( parameters );
	m_geometryGroup.Add( Geometry::shared_ptr( terra ) );
  -->
</xml>