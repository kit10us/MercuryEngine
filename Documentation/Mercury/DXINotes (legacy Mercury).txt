8/27/2013:
* Moved qlib::File to Unify, as it is very useful, and just about the only thing left in qlib. We want it in Mercury, so, to share it, instead of updating qlib, move to Unify, for support in earlier VS than VS2012.
* Design note: I have thought about having a grouping of resource managers into an object ("Managers"), and have tried this. It was to solve the problem of passing around upwards of 4 managers in function calls, to specify which managers are used during creation. It did simplify the code, however, in the end, the concept was verbose and likely unnecessary. The concept was that we can use different managers of the same type, for example, we could have two different texture managers. The question then became, "Why?" Loading groups? So we can load all common assets first A, then level 1s assets next B, then level 2s assets C. However, this is likely best served through an update to all the managers, a sort of "Groups" class that is common to all resource managers; that would be simplest. Perhaps incase we have two devices, such as video cards, with different memory sections, so the assets can't be shared? In this case, it's more likely that we do something similar to the previous "Groups" idea, perhaps as a tag we can pivot off of (perhaps the grouping is pushed to reosurce names: "tree" vs "tree.device0" vs "tree.brown.device0" vs "tree:device1". Either way, the added complexity of the passing of ANY managers, was unnecessary, best, thus far, to use the singleton features of Game, which are very well exposed. This reduces code bloat, and simplifies interfaces. The advantages will likely need to be more obvious before any specific support for the above should be added, and if we follow the "Group" design paradigm, than this direction is still the correct best. In the end, all passing of managers seems unnecessary, except where we need them specifically for sub-geometry loading (i.e., a subset of geometry for a particular mesh that will need to be tweaked before push into the main set, or that will be removed entirely without dirtying, as if, the main set).