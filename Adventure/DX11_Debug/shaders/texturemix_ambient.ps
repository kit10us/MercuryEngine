struct VS_OUT
{
	float4 position	: SV_POSITION;
	float2 uvA		: TEXCOORD0;
	float2 uvB		: TEXCOORD1;
	float2 uvMix	: TEXCOORD2;
	float3 normal   : NORMAL;
};

Texture2D diffuseMap[3];
SamplerState linearSample;

cbuffer lighting
{
	float3 AmbientDown : packoffset(c0);
	float3 AmbientUp : packoffset(c1);
};

float3 CalculateAmbient( float3 normal, float4 color )
{
	// Convert from [-1, 1] to [0, 1]
	float up = normal.y * 0.5 + 0.5;
	
	// Calculate the ambient value.
	float3 ambient = AmbientDown + up * AmbientUp;
	
	// Apply the ambient value to the color
	return ambient * color;
};

float3 ps_main( in VS_OUT ps_in ) : SV_TARGET
{
	float4 colorA = diffuseMap[0].Sample( linearSample, ps_in.uvA );
	float4 colorB = diffuseMap[1].Sample( linearSample, ps_in.uvB );
	float4 colorMix = diffuseMap[2].Sample( linearSample, ps_in.uvMix );	
	
	float3 normal = normalize( ps_in.normal );	
	
	colorA.rgb += float3(1,1,1) - colorMix.rgb;
	
	float4 colorFinal = float4(colorA * (colorMix.r)) + float4(colorB * (1-colorMix.r));

	return CalculateAmbient( normal, colorFinal );
}
